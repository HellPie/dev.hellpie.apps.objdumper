/*
 * Copyright 2016 Diego Rossi (@_HellPie)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.model.library'

model {
	android {
		compileSdkVersion 23
		buildToolsVersion "23.0.3"

		/**
		 * SELF-INCREMENTING VERSION CODES AND NAMES
		 * Copyright (c) Diego "@_HellPie" Rossi (2015-2016)
		 */
		def task = gradle.startParameter.taskNames
		def versioningFile = file('version.properties')
		if(versioningFile.canRead()) {
			def Properties versionProperties = new Properties()
			versionProperties.load(new FileInputStream(versioningFile))

			// Recognize release builds based on Gradle task name
			def release = ('assemble' in task || 'assembleRelease' in task || 'aR' in task)

			def verMajor = versionProperties['VERSION_MAJOR'].toInteger() + (release ? 1 : 0)
			def verMinor = versionProperties['VERSION_MINOR'].toInteger()
			def verRevision = versionProperties['VERSION_REVISION'].toInteger()
			def verBuild = versionProperties['VERSION_BUILD'].toInteger() + 1

			if(verBuild % 100 == 0 && verBuild != 0) {
				verRevision += 1
			}

			if(verRevision % 10 == 0 && verRevision != 0) {
				verRevision = 0
				verMinor += 1
			}

			// Store all the updated properties back into the file
			versionProperties['VERSION_MAJOR'] = verMajor.toString()
			versionProperties['VERSION_MINOR'] = verMinor.toString()
			versionProperties['VERSION_REVISION'] = verRevision.toString()
			versionProperties['VERSION_BUILD'] = verBuild.toString()
			versionProperties.store(versioningFile.newWriter(), null)

			// Build actual versionCode and versionName from read values
			def int verCode = verMajor * 100 + verMinor
			def String verName = "${verMajor}.${verMinor}.${verRevision}.${verBuild}"

			// If debug I like to see the builder machine infos
			if(!release) {
				verName += " " + System.getenv('USER') + "@" + InetAddress.getLocalHost().getHostName()
			}

			defaultConfig {
				minSdkVersion.apiLevel 19
				targetSdkVersion.apiLevel 22
				versionCode verCode
				versionName verName
			}

		} else {
			throw new GradleException("Unable to read version.properties!")
		}

		ndk {
			moduleName "elf-analyzer"

			toolchain "clang"

			cppFlags.addAll(["-std=c++11"])
			ldFlags.add("-L/custom/lib/path")
			ldLibs.add("log")

			stl "gnustl_shared"
		}

//		/**
//		 * SELF-GENERATING FLAVORS
//		 * Copyright (c) Diego "@_HellPie" Rossi (2015-2016)
//		 */
//		productFlavors.create("auto") // Empty: all abis
//		if(!('assemble' in task || 'assembleRelease' in task || 'aR' in task)) { // release build
//			productFlavors.auto {
//				ndk.abiFilters.add("armeabi-v7a") // I use only armv7 devices, speeds up build
//			}
//		}

		buildTypes {
			release {
				minifyEnabled true
				proguardFiles.add(file('proguard-rules.pro'))
			}
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
}
